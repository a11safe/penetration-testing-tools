#!/usr/bin/python
#Author: Iulian Bancau

import argparse
from requests import request
import requests
import os

help_msg = "Utility tool for Penetration Testers.\n\n Developed by Iulian Bancau.\n\n https://github.com/a11safe"
parser = argparse.ArgumentParser(description = help_msg)
parser.add_argument("-u", "--URL", help = "URL to generate files for")
parser.add_argument("-dc", "--DCERT", help = "Disable SSL certificate checking | Values: yes / no")
args = parser.parse_args()

if args.URL:

    if args.DCERT:
        if args.DCERT == 'yes':
            ssl_check = True
        else:
            ssl_check = False
    else:
        ssl_check = True

    folder_name = args.URL.split("//")
    if 'http:' in folder_name: 
        folder_name.remove('http:')
        transmission_protocol = 'http:'
    if 'https:' in folder_name: 
        folder_name.remove('https:')
        transmission_protocol = 'https:'

    folder_name = folder_name[0].split("/")
    folder_name = folder_name[0]

    print("\n\033[1m-> Generating " + folder_name + " directory\033[0m \n")

    if not os.path.exists(folder_name):
        os.mkdir(folder_name)
        print("\t\033[42m[ OK ]\033[0m Directory " , folder_name ,  " created.\n")
    else:    
        print("\t\033[0;41m[ ! ]\033[0m Directory " , folder_name ,  " already exists!\n")

    print("\n->\033[1m Generating ClickJacking file ...\033[0m \n")

    clickjacking_file = os.path.join(os.getcwd(),folder_name,"clickjacking_" + folder_name + ".html")

    file_html = open(clickjacking_file, "w")
    
    file_html.write('''<html>
    <head>
    <title>Clickjacking test page</title>
    </head>
    <body>
    <p>If the page is loading, then application is vulnerable to clickjacking!</p>
    <iframe src="'''+ args.URL +'''" width="600"
    height="400"></iframe>
    </body>
    </html>''')

    file_html.close()
    print("\t\033[42m[ * ]\033[0m \"" + clickjacking_file + "\" created\n")

    print("\n\033[1m-> Checking for HTTP Methods and XST ...\n")
    method_list = ['GET', 'POST', 'TRACE', 'PUT', 'DELETE', 'OPTIONS', 'HEAD']
    for method in method_list:
        req = request(method, args.URL, verify=ssl_check)
        print("\t\u001B[44m[ * ]\033[0m\033[1m", method, "\033[0m\t", req.status_code, req.reason)

    print("\n\033[1m-> Get headers ...\033[0m \n")

    response = requests.head(args.URL, verify=ssl_check)

    for key, value in response.headers.items():
        print ("\t\u001B[44m[ * ]\033[0m\033[1m", key + ":","\033[0m\t", value)

    hsts = response.headers.get('Strict-Transport-Security')
    print("\n\033[1m-> Checking for HSTS Header ...\033[0m \n")
    if hsts:
        print("\t\u001B[44m[ * ]\033[0m", "Strict-Transport-Security value:", "\t [ " + hsts + " ]")
    else:
        print("\t\033[0;41m[ ! ]\033[0m", "HTTP Strict Transport Security header missing\033[0m")

    cors = response.headers.get('access-control-allow-origin')
    print("\n\033[1m-> Checking for CORS ...\033[0m \n")
    if cors:
        print("\t\u001B[44m[ * ]\033[0m", "Access-Control-Allow-Origin:", "\t [ " + cors + " ]")
    else:
        print("\t\033[0;41m[ ! ]\033[0m", "Access-Control-Allow-Origin header missing\033[0m")

    print("\n\033[1m-> Checking for Cache Control ...\033[0m \n")
    cachecontrol = response.headers.get('Cache-Control')
    if cachecontrol:
        print("\t\u001B[44m[ * ]\033[0m", "Cache-Control:", "\t [ " + cachecontrol + " ]")
    else:
        print("\t\033[0;41m[ ! ]\033[0m", "Cache-Control header missing\033[0m")

    pragma = response.headers.get('Pragma')
    if pragma:
        print("\t\u001B[44m[ * ]\033[0m", "Pragma:", "\t\t [ " + pragma + " ]")
    else:
        print("\t\033[0;41m[ ! ]\033[0m", "Pragma header missing\033[0m")

    print("\n\033[1m-> Checking for Cookies Attributes ...\033[0m \n")

    cookies = response.headers.get('Set-Cookie')
    if cookies:
        print("\t\u001B[44m[ * ]\033[0m", "Set-Cookie:", "\t [ " + cookies + " ]\n")
    else:
        print("\t\033[0;41m[ ! ]\033[0m", "Set-Cookie missing\033[0m\n")

    print("\n\033[1m-> Checking for useful files ...\033[0m \n")

    request = requests.get(transmission_protocol + '//' + folder_name + '/robots.txt', verify=ssl_check)
    if request.status_code == 200:
        print("\t\u001B[44m[ * ]\033[0m", "robots.txt exists")
    else:
        print("\t\033[0;41m[ ! ]\033[0m", "robots.txt does not exist")

    request = requests.get(transmission_protocol + '//' + folder_name + '/.htaccess', verify=ssl_check)
    if request.status_code == 200:
        print("\t\u001B[44m[ * ]\033[0m", ".htaccess available")
    else:
        print("\t\033[0;41m[ ! ]\033[0m", ".htaccess not available")

    request = requests.get(transmission_protocol + '//' + folder_name + '/error_log', verify=ssl_check)
    if request.status_code == 200:
        print("\t\u001B[44m[ * ]\033[0m", "error_log available")
    else:
        print("\t\033[0;41m[ ! ]\033[0m", "error_log not available")

    request = requests.get(transmission_protocol + '//' + folder_name + '/errors_log', verify=ssl_check)
    if request.status_code == 200:
        print("\t\u001B[44m[ * ]\033[0m", "errors_log exists")
    else:
        print("\t\033[0;41m[ ! ]\033[0m", "errors_log does not exist")

    request = requests.get(transmission_protocol + '//' + folder_name + '/web.config', verify=ssl_check)
    if request.status_code == 200:
        print("\t\u001B[44m[ * ]\033[0m", "web.config exists")
    else:
        print("\t\033[0;41m[ ! ]\033[0m", "web.config does not exist")


    print("\n\033[1m-> Checking webserver technology ...\033[0m \n")

    request_php = requests.get(transmission_protocol + '//' + folder_name + '/index.php', verify=ssl_check)
    request_html = requests.get(transmission_protocol + '//' + folder_name + '/index.html', verify=ssl_check)
    request_htm = requests.get(transmission_protocol + '//' + folder_name + '/index.htm', verify=ssl_check)

    if request_php.status_code == 200:
        print("\t\u001B[44m[ * ]\033[0m", "Webserver using PHP")
    elif request_html.status_code == 200:
        print("\t\u001B[44m[ * ]\033[0m", "Webserver using HTML")
    elif request_htm.status_code == 200:
        print("\t\u001B[44m[ * ]\033[0m", "Webserver using HTM")
    else:
        print("\t\033[0;41m[ ! ]\033[0m", "Testing unsuccessful")

    print("\n\033[1mDONE!\n")

else:
    parser.print_help()